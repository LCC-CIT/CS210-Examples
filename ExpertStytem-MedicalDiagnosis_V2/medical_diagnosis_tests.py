# medical_diagnosis_tests.py
# Tests for the medical diagnosis expert system.
# Code generated by Gemini Flash 2.5 10/6/2025
# Refactored extensively by Brian Bird 10/11 and 10/25/2025

from inference_engine import get_diagnosis

print("--- Scenario 1: Influenza Chain ---")
patient_facts_1 = ['fever', 'cough', 'body_aches']
goal_recommendations_1 = get_diagnosis(patient_facts_1)
print("Expected Diagnoses: influenza")
print("Actual Diagnoses:", *(goal_recommendations_1.get('diagnoses') or ['None']))
print("Expected Recommendations: rest")
print("Actual Recommendations:", *(goal_recommendations_1.get('recommendations') or ['None']))
passed_1 = (goal_recommendations_1.get('diagnoses') == ['influenza'] and 
            goal_recommendations_1.get('recommendations') == ['rest'])
print("Result: PASS" if passed_1 else "Result: FAIL")
print()

print("--- Scenario 2: Common Cold ---")
patient_facts_2 = ['fever', 'cough', 'sore_throat']
goal_recommendations_2 = get_diagnosis(patient_facts_2)
print("Expected Diagnoses: common_cold")
print("Actual Diagnoses:", *(goal_recommendations_2.get('diagnoses') or ['None']))
print("Expected Recommendations: None")
print("Actual Recommendations:", *(goal_recommendations_2.get('recommendations') or ['None']))
passed_2 = (goal_recommendations_2.get('diagnoses') == ['common_cold'] and 
            goal_recommendations_2.get('recommendations') == [])
print("Result: PASS" if passed_2 else "Result: FAIL")
print()

print("--- Scenario 3: Migraine ---")
patient_facts_3 = ['headache', 'nausea', 'light_sensitivity']
goal_recommendations_3 = get_diagnosis(patient_facts_3)
print("Expected Diagnoses: migraine")
print("Actual Diagnoses:", *(goal_recommendations_3.get('diagnoses') or ['None']))
print("Expected Recommendations: dark_room")
print("Actual Recommendations:", *(goal_recommendations_3.get('recommendations') or ['None']))
passed_3 = (goal_recommendations_3.get('diagnoses') == ['migraine'] and 
            goal_recommendations_3.get('recommendations') == ['dark_room'])
print("Result: PASS" if passed_3 else "Result: FAIL")
print()

print("--- Scenario 4: Food Poisoning ---")
patient_facts_4 = ['no_appetite', 'stomach_pain']
goal_recommendations_4 = get_diagnosis(patient_facts_4)
print("Expected Diagnoses: food_poisoning")
print("Actual Diagnoses:", *(goal_recommendations_4.get('diagnoses') or ['None']))
print("Expected Recommendations: None")
print("Actual Recommendations:", *(goal_recommendations_4.get('recommendations') or ['None']))
passed_4 = (goal_recommendations_4.get('diagnoses') == ['food_poisoning'] and 
            goal_recommendations_4.get('recommendations') == [])
print("Result: PASS" if passed_4 else "Result: FAIL")
print()

# Additional tests for edge cases

print("--- Scenario 5: Empty Symptoms ---")
patient_facts_5 = []
goal_recommendations_5 = get_diagnosis(patient_facts_5)
print("Expected Diagnoses: None")
print("Actual Diagnoses:", *(goal_recommendations_5.get('diagnoses') or ['None']))
print("Expected Recommendations: None")
print("Actual Recommendations:", *(goal_recommendations_5.get('recommendations') or ['None']))
passed_5 = (goal_recommendations_5.get('diagnoses') == [] and 
            goal_recommendations_5.get('recommendations') == [])
print("Result: PASS" if passed_5 else "Result: FAIL")
print()

print("--- Scenario 6: Unknown Symptoms ---")
patient_facts_6 = ['unicorn_sneeze', 'dragon_cough']
goal_recommendations_6 = get_diagnosis(patient_facts_6)
print("Expected Diagnoses: None")
print("Actual Diagnoses:", *(goal_recommendations_6.get('diagnoses') or ['None']))
print("Expected Recommendations: None")
print("Actual Recommendations:", *(goal_recommendations_6.get('recommendations') or ['None']))
passed_6 = (goal_recommendations_6.get('diagnoses') == [] and 
            goal_recommendations_6.get('recommendations') == [])
print("Result: PASS" if passed_6 else "Result: FAIL")
print()

print("--- Scenario 7: Case Insensitivity Test ---")
patient_facts_7a = ['fever', 'cough', 'sore_throat']
patient_facts_7b = ['FEVER', 'COUGH', 'SORE_THROAT']
patient_facts_7c = ['Fever', 'Cough', 'Sore Throat']
results_7a = get_diagnosis(patient_facts_7a)
results_7b = get_diagnosis(patient_facts_7b)
results_7c = get_diagnosis(patient_facts_7c)
print("Expected: All three should produce common_cold diagnosis")
print("Actual Lowercase diagnoses:", *(results_7a.get('diagnoses') or ['None']))
print("Actual Uppercase diagnoses:", *(results_7b.get('diagnoses') or ['None']))
print("Actual Mixed case diagnoses:", *(results_7c.get('diagnoses') or ['None']))
print("Expected Results match: True")
print("Actual Results match:", results_7a == results_7b == results_7c)
passed_7 = (results_7a == results_7b == results_7c and 
            results_7a.get('diagnoses') == ['common_cold'])
print("Result: PASS" if passed_7 else "Result: FAIL")
print()

print("--- Scenario 8: Symptom Order Independence ---")
patient_facts_8a = ['fever', 'cough', 'body_aches']
patient_facts_8b = ['body_aches', 'fever', 'cough']
patient_facts_8c = ['cough', 'body_aches', 'fever']
results_8a = get_diagnosis(patient_facts_8a)
results_8b = get_diagnosis(patient_facts_8b)
results_8c = get_diagnosis(patient_facts_8c)
print("Expected: All three should produce influenza diagnosis")
print("Actual Order 1 diagnoses:", *(results_8a.get('diagnoses') or ['None']))
print("Actual Order 2 diagnoses:", *(results_8b.get('diagnoses') or ['None']))
print("Actual Order 3 diagnoses:", *(results_8c.get('diagnoses') or ['None']))
print("Expected Results match: True")
print("Actual Results match:", results_8a == results_8b == results_8c)
passed_8 = (results_8a == results_8b == results_8c and 
            results_8a.get('diagnoses') == ['influenza'])
print("Result: PASS" if passed_8 else "Result: FAIL")
print()

print("--- Scenario 9: Duplicate Symptoms ---")
patient_facts_9a = ['fever', 'cough', 'body_aches']
patient_facts_9b = ['fever', 'fever', 'cough', 'cough', 'body_aches', 'body_aches']
results_9a = get_diagnosis(patient_facts_9a)
results_9b = get_diagnosis(patient_facts_9b)
print("Expected: Both should produce influenza diagnosis")
print("Actual No duplicates diagnoses:", *(results_9a.get('diagnoses') or ['None']))
print("Actual With duplicates diagnoses:", *(results_9b.get('diagnoses') or ['None']))
print("Expected Results match: True")
print("Actual Results match:", results_9a == results_9b)
passed_9 = (results_9a == results_9b and 
            results_9a.get('diagnoses') == ['influenza'])
print("Result: PASS" if passed_9 else "Result: FAIL")
print()
