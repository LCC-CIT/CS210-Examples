# inference_engine.py
# Contains the core inference and extraction functions for the medical diagnosis expert system.
# Code generated by Gemini Flash 2.5 10/6/2025
# Refactored extensively by Brian Bird 10/11/2025

from knowledge_base import KNOWLEDGE_BASE, IF_KEY, THEN_KEY, RESULT_TYPE_KEY, RESULT_TYPE_DIAGNOSIS, RESULT_TYPE_RECOMMENDATION

DIAGNOSIS_PREFIX = 'diagnosis:'
RECOMMENDATION_PREFIX = 'recommendation:'

def forward_chaining_inference(rules, initial_facts):
    """
    Performs forward chaining inference to derive new facts from initial facts and rules.
    
    Forward chaining is a data-driven inference method that starts with known facts
    and repeatedly applies rules to derive new facts until no more conclusions can
    be drawn. The algorithm:
    1. Starts with a set of initial facts (e.g., user symptoms)
    2. Iterates through all rules to find those whose conditions are satisfied
    3. When a rule's conditions are met, adds its conclusion to the fact set
    4. Repeats until no new facts can be derived (fixed point reached)
    
    This implementation uses a monotonic approach where facts are only added,
    never removed, ensuring the reasoning process is deterministic and complete.
    
    Args:
        rules (list): A list of rule dictionaries. Each rule must contain:
            - 'if' (set): A set of condition facts that must all be present
            - 'then' (str): The conclusion fact to derive when conditions are met
            - 'result_type' (str): Classification of the conclusion (INTERMEDIATE, 
              DIAGNOSIS, or RECOMMENDATION)
        initial_facts (iterable): An iterable (typically list or set) of starting
            fact strings representing known information (e.g., patient symptoms)
    
    Returns:
        list: A list of newly derived fact strings (excluding the initial facts).
            Returns an empty list if no new facts could be derived.
  
    Notes:
        - The algorithm is order-independent: rules can be in any order
        - Runs in O(n*m) worst case where n=rules, m=iterations needed
        - Guarantees completeness: all derivable facts will be found
    """
    facts = set(initial_facts)
    new_fact_added = True
    while new_fact_added:
        new_fact_added = False
        for rule in rules:
            conditions_needed = rule[IF_KEY]
            new_fact = rule[THEN_KEY]
            # Check if all conditions are satisfied and conclusion is not already known
            if conditions_needed.issubset(facts) and new_fact not in facts:
                facts.add(new_fact)
                new_fact_added = True
    # Return only the newly derived facts, excluding the initial facts
    derived_facts = list(facts - set(initial_facts))
    return derived_facts

def extract_goals(derived_facts):
    """
    Extracts and categorizes final diagnoses and recommendations from derived facts.
    
    Args:
        final_facts (iterable): An iterable (typically list) of fact strings that
            were derived by the inference process. Should not include initial facts.
    
    Returns:
        dict: A dictionary with two keys:
            - 'diagnoses' (list): Facts classified as DIAGNOSIS in the rules
            - 'recommendations' (list): Facts classified as RECOMMENDATION in the rules
            Each list may be empty if no facts of that type were derived.
    
    Notes:
        - Intermediate facts are filtered out and not included in results
        - Order of facts in returned lists matches order they appear in rules
    """
    # Extract diagnoses by finding facts with 'diagnosis:' prefix and removing the prefix
    diagnoses = [fact.split(':', 1)[1] for fact in derived_facts 
                 if fact.startswith('diagnosis:')]
    # Extract recommendations by finding facts with 'recommendation:' prefix and removing the prefix
    recommendations = [fact.split(':', 1)[1] for fact in derived_facts 
                       if fact.startswith(RECOMMENDATION_PREFIX)]
    return {"diagnoses": diagnoses, "recommendations": recommendations}

def get_diagnosis(initial_facts):
    """
    High-level function to obtain diagnoses and recommendations from symptoms.
    This is the main entry point for the inference engine, providing a simple

    Args:
        initial_facts (iterable): An iterable (typically list) of starting fact
            strings, usually representing patient symptoms (e.g., ['fever', 'cough']).
            Can be any facts that match conditions in the knowledge base rules.
    
    Returns:
        dict: A dictionary containing two keys:
            - 'diagnoses' (list): Derived diagnostic conclusions
            - 'recommendations' (list): Suggested actions or treatments
            Both lists may be empty if no conclusions could be drawn.
    
    Raises:
        KeyError: If rules in KNOWLEDGE_BASE are missing required keys
        TypeError: If initial_facts is not iterable
    """
    derived_facts = forward_chaining_inference(KNOWLEDGE_BASE, initial_facts)
    results = extract_goals(derived_facts)
    return results
