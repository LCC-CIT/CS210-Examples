# knowledge_base.py
# Contains the hardcoded knowledge base (rules) for the medical diagnosis expert system.
# And code to load from CSV file if desired. Choose the source of rules by setting HARD_CODED_RULES.
# Code generated by Gemini Flash 2.5 10/6/2025
# Code for loading from CSV by GitHub Copilot with GPT-4.1, 10/11/2025
# Refactored by Brian Bird 10/11/2025

import csv

HARD_CODED_RULES = False  # Set to False to load rules from CSV file
CSV_PATH = 'medical_diagnosis.csv'

# Constants for rule dictionary keys
IF_KEY = "if"
AND_KEY = "and"
THEN_KEY = "then"
RESULT_TYPE_KEY = "result_type"
# Constants for result_type values
RESULT_TYPE_INTERMEDIATE = "INTERMEDIATE"
RESULT_TYPE_DIAGNOSIS = "DIAGNOSIS"
RESULT_TYPE_RECOMMENDATION = "RECOMMENDATION"


HARDCODED_KNOWLEDGE_BASE = [
    # Rule 1: Suspect Flu
    {
        IF_KEY: {"fever", "cough"},
        THEN_KEY: "suspect_flu",
        RESULT_TYPE_KEY: RESULT_TYPE_INTERMEDIATE
    },
    # Rule 2: Suspect Migraine
    {
        IF_KEY: {"headache", "nausea"},
        THEN_KEY: "suspect_migraine",
        RESULT_TYPE_KEY: RESULT_TYPE_INTERMEDIATE
    },
    # Rule 3: Diagnosis Influenza
    {
        IF_KEY: {"suspect_flu", "body_aches"},
        THEN_KEY: "diagnosis_influenza",
        RESULT_TYPE_KEY: RESULT_TYPE_DIAGNOSIS
    },
    # Rule 4: Diagnosis Common Cold
    {
        IF_KEY: {"suspect_flu", "sore_throat"},
        THEN_KEY: "diagnosis_common_cold",
        RESULT_TYPE_KEY: RESULT_TYPE_DIAGNOSIS
    },
    # Rule 5: Diagnosis Migraine
    {
        IF_KEY: {"suspect_migraine", "light_sensitivity"},
        THEN_KEY: "diagnosis_migraine",
        RESULT_TYPE_KEY: RESULT_TYPE_DIAGNOSIS
    },
    # Rule 6: Recommendation for Influenza
    {
        IF_KEY: {"diagnosis_influenza"},
        THEN_KEY: "recommend_rest",
        RESULT_TYPE_KEY: RESULT_TYPE_RECOMMENDATION
    },
    # Rule 7: Recommendation for Migraine
    {
        IF_KEY: {"diagnosis_migraine"},
        THEN_KEY: "recommend_dark_room",
        RESULT_TYPE_KEY: RESULT_TYPE_RECOMMENDATION
    },
    # Rule 8: Diagnosis Food Poisoning
    {
        IF_KEY: {"no_appetite", "stomach_pain"},
        THEN_KEY: "diagnosis_food_poisoning",
        RESULT_TYPE_KEY: RESULT_TYPE_DIAGNOSIS
    },
]


def load_knowledge_base_from_csv(csv_path):
    """
    Loads rules from a CSV file with a guaranteed lower-case header row.
    - The value of the 'if' key is a set containing the 'if' and (if present) the 'and' value.
    - The 'and' key is removed from each rule.
    Returns a list of dictionaries ready for use by the inference engine.
    """
    with open(csv_path, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        rules = []
        for row in reader:
            # Build the 'if' value set
            if_set = set()
            if row.get(IF_KEY):
                if_set.add(row[IF_KEY])
            if row.get(AND_KEY):
                if_set.add(row[AND_KEY])
            row[IF_KEY] = if_set
            # Remove the 'and' key
            if AND_KEY in row:
                del row[AND_KEY]
            rules.append(row)
    return rules

if HARD_CODED_RULES:
    KNOWLEDGE_BASE = HARDCODED_KNOWLEDGE_BASE
else:
    KNOWLEDGE_BASE = load_knowledge_base_from_csv(CSV_PATH)
