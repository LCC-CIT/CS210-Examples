# inference_engine.py
# Contains the core inference and extraction functions for the medical diagnosis expert system.
# Code generated by Gemini Flash 2.5 10/6/2025
# Refactored extensively by Brian Bird 10/11/2025

from knowledge_base import KNOWLEDGE_BASE, IF_KEY, THEN_KEY, RESULT_TYPE_KEY, RESULT_TYPE_DIAGNOSIS, RESULT_TYPE_RECOMMENDATION

def forward_chaining_inference(rules, initial_facts):
    """
    Performs the core Forward Chaining inference process.
    Parameters:
    - rules: iterable (typically a list) of rules. 
        Each rule is a dictionary with keys 'if', 'then', and 'result_type'.
    - initial_facts: iterable (typically a list) of starting fact strings.
    Returns:
    - List of derived facts
        The list of facts derived from the initial facts and rules (excluding the initial facts).
    """
    facts = set(initial_facts)
    new_fact_added = True
    while new_fact_added:
        new_fact_added = False
        for rule in rules:
            conditions_needed = rule[IF_KEY]
            new_fact = rule[THEN_KEY]
            if conditions_needed.issubset(facts) and new_fact not in facts:
                facts.add(new_fact)
                new_fact_added = True
    derived_facts = list(facts - set(initial_facts))
    return derived_facts

def extract_goals(rules, final_facts):
    """
    Finds all facts that were derived AND are marked as a diagnosis or recommendation in the rules.
    Parameters:
    - rules: List (or iterable) of rule dicts with 'then' and 'result_type' keys
    - final_facts: List (or iterable) of fact strings derived by the inference process.
    Returns:
    - Dictionary with 'diagnoses' and 'recommendations' keys, each mapping to a list of facts.
    """
    diagnoses = []
    recommendations = []
    for rule in rules:
        fact = rule[THEN_KEY]
        result_type = rule[RESULT_TYPE_KEY]
        if fact in final_facts:
            if result_type.upper() == RESULT_TYPE_DIAGNOSIS:
                diagnoses.append(fact)
            elif result_type.upper() == RESULT_TYPE_RECOMMENDATION:
                recommendations.append(fact)
    return {"diagnoses": diagnoses, "recommendations": recommendations}

def get_diagnosis(initial_facts):
    """
    Get the diagnoses and recommendations based on initial facts.
    Parameters:
    - initial_facts: iterable (typically a list) of starting fact strings.
    Returns:
    - Dictionary with diagnoses and recommendations
        The dictionary contains the derived facts and goal recommendations as lists.
    """
    derived_facts = forward_chaining_inference(KNOWLEDGE_BASE, initial_facts)
    results = extract_goals(KNOWLEDGE_BASE, derived_facts)
    return results
